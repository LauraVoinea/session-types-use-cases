module test2.runtime.net.smtp.SMTP;

sig <java> "test2.runtime.net.smtp.message._220"
		from "test2/runtime/net/smtp/message/_220.java" as 220;
sig <java> "test2.runtime.net.smtp.message.Ehlo"
		from "test2/runtime/net/smtp/message/Ehlo.java" as ehlo;
sig <java> "test2.runtime.net.smtp.message._250"
		from "test2/runtime/net/smtp/message/_250.java" as 250;
sig <java> "test2.runtime.net.smtp.message._250_"
		from "test2/runtime/net/smtp/message/_250_.java" as 250dash;
sig <java> "test2.runtime.net.smtp.message.StartTls"
		from "test2/runtime/net/smtp/message/StartTls.java" as starttls;
sig <java> "test2.runtime.net.smtp.message.Auth"
		from "test2/runtime/net/smtp/message/Auth.java" as auth;
sig <java> "test2.runtime.net.smtp.message._235"
		from "test2/runtime/net/smtp/message/_235.java" as 235;
sig <java> "test2.runtime.net.smtp.message._535"
		from "test2/runtime/net/smtp/message/_535.java" as 535;
sig <java> "test2.runtime.net.smtp.message._501"
		from "test2/runtime/net/smtp/message/_501.java" as 501;
sig <java> "test2.runtime.net.smtp.message.Mail"
		from "test2/runtime/net/smtp/message/Mail.java" as mail;
sig <java> "test2.runtime.net.smtp.message.Rcpt"
		from "test2/runtime/net/smtp/message/Rcpt.java" as rcpt;
sig <java> "test2.runtime.net.smtp.message.Subject"
		from "test2/runtime/net/smtp/message/Subject.java" as subject;
sig <java> "test2.runtime.net.smtp.message.DataLine"
		from "test2/runtime/net/smtp/message/DataLine.java" as dataline;
sig <java> "test2.runtime.net.smtp.message.Data"
		from "test2/runtime/net/smtp/message/Data.java" as data;
sig <java> "test2.runtime.net.smtp.message._354"
		from "test2/runtime/net/smtp/message/_354.java" as 354;
sig <java> "test2.runtime.net.smtp.message.EndOfData"
		from "test2/runtime/net/smtp/message/EndOfData.java" as atad;
sig <java> "test2.runtime.net.smtp.message.Quit"
		from "test2/runtime/net/smtp/message/Quit.java" as quit;

global protocol SMTP(role S, role C)
{
	220 from S to C;
	do Ehlo(S, C);
}

global protocol Ehlo(role S, role C)
{
	choice at C
	{
		ehlo from C to S;
		rec X
		{
			choice at S
			{
				250dash from S to C;
				continue X;
			}
			or
			{
				250 from S to C;
				do StartTls(S, C);
			}
		}
	}
	or
	{
		quit from C to S;
	}
}

global protocol StartTls(role S, role C)
{
	choice at C
	{
		// Do TLS handshake: level below the application level protocol (like normal TCP handshake)
		starttls from C to S;
		220 from S to C;
		do SecureEhlo(S, C);
	}
	or
	{
		quit from C to S;
	}
}

global protocol SecureEhlo(role S, role C)
{
	choice at C
	{
		ehlo from C to S;
		rec X
		{
			choice at S
			{
				250dash from S to C;
				continue X;
			}
			or
			{
				250 from S to C;
				do Auth(S, C);
			}
		}
	}
	or
	{
		quit from C to S;
	}
}

global protocol Auth(role S, role C)
{
	rec Y
	{
		choice at C
		{
			auth from C to S;
			choice at S
			{
				235 from S to C;
				do Mail(S, C);
			}
			or
			{
				535 from S to C;
				continue Y;
			}
			//.. 501 Invalid base64 data 
		}
		or
		{
			quit from C to S;
		}
	}
}

global protocol Mail(role S, role C)
{
	rec Z1
	{
		choice at C
		{
			mail from C to S; //mail from:<a@b.com>
			choice at S
			{
				501 from S to C;
				continue Z1;
			}
			or
			{
				250 from S to C;
				
				rec Z2
				{
					choice at C
					{
						rcpt from C to S; //rcpt to:<c@d.com>
						choice at S
						{
							250 from S to C;
							continue Z2;
						}
					}
					or
					{
						data from C to S;
						354 from S to C;
						//too from C to S; //to:<you>
						//froom from C to S; //from:<me>
						rec Z3
						{
							choice at C
							{
								dataline from C to S;
								continue Z3;
							}
							or
							{
								subject from C to S; //subject:<my subject>
								continue Z3;
							}
							or
							{
								atad from C to S; // CRLF.CRLF
								250 from S to C;
								continue Z1;
							}
						}	
					}
				}
			}
		}
		or
		{
			quit from C to S;
		}
	}
}
