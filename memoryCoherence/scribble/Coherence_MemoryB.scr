module Coherence_MemoryB;

type <java> "java.lang.byte" from "rt.jar" as byte;

local protocol ValidAValidB at MemoryB(role Decide,role A,role B,role MemoryA,role MemoryB) {
	choice at Decide {
		readA() from Decide;
		do ValidAValidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	} or {
		readB() from Decide;
		value(byte) to B;
		do ValidAValidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	} or {
		writeA() from Decide;
		do ValidAInvalidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	} or {
		writeB() from Decide;
		value(byte) from B;
		do InvalidAValidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	}
}

local protocol ValidAInvalidB at MemoryB(role Decide,role A,role B,role MemoryA,role MemoryB) {
	choice at Decide {
		readA() from Decide;
		do ValidAInvalidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	} or {
		readB() from Decide;
		value(byte) from MemoryA;
		value(byte) to B;
		do ValidAValidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	} or {
		writeA() from Decide;
		do ValidAInvalidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	} or {
		writeB() from Decide;
		value(byte) from B;
		do InvalidAValidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	}
}

local protocol InvalidAValidB at MemoryB(role Decide,role A,role B,role MemoryA,role MemoryB) {
	choice at Decide {
		readA() from Decide;
		value(byte) to MemoryA;
		do ValidAValidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	} or {
		readB() from Decide;
		value(byte) to B;
		do InvalidAValidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	} or {
		writeA() from Decide;
		do ValidAInvalidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	} or {
		writeB() from Decide;
		value(byte) from B;
		do InvalidAValidB(Decide as Decide,A as A,B as B,MemoryA as MemoryA,MemoryB as MemoryB);
	}
}
