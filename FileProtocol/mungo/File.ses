package mungo;
import java.io.*;

class File typestate FileProtocol {
	private MyBufferedReader reader;
	private String file;
	private char[] readBuffer;
	private int i;

	File(String file) {
		this.file = file;
		reader = new MyBufferedReader(file);
		readBuffer = new char[1024];
		i = 0;
	}

	Status open() {
		if(reader.open())
			return new Status(Status.OK);
		return new Status(Status.ERROR);
	}

	void close() {
		reader.close();
	}

	BooleanEnum hasNext() {
		if(reader.ready())
			return new BooleanEnum(BooleanEnum.TRUE);
		return new BooleanEnum(BooleanEnum.FALSE);
	}

	void read() {
		readBuffer[i++] = reader.read();
	}

	//The next two methods demonstrate that
	// a created typestate object can
	// be assigned in a linear way and
	// passed around as an argument

	public static void main(String[] args) {
		File myFile = new File("file.txt");
		File a = myFile;
		processFile(a);
	}

	public static void processFile(File myFile) {
		switch(myFile.open().getEnum()) {
			case Status.OK:
				loop:
				while(true) {
					switch(myFile.hasNext().getEnum()) {
						case BooleanEnum.TRUE:
							myFile.read();
							break;
						case BooleanEnum.FALSE:
							break loop;
					}
				}
				myFile.close();
				break;
			case Status.ERROR:
				System.out.println("File <file.txt> not found!");
				break;
		}
	}

}
